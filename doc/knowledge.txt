
待辦事項:
    1.確認 ECBank 是否使用 192.168.8.98 umail02 server 寄信
-----------------------------------------------------------------------------------------------------------------------
Railway:
    關帳規格: [$GWECpauUrl/tarin_close.php?s=[授權單號]&a=[退款金額(正數)]&t=minus&c=[檢查碼]&Ntime=[201509xxxxxxxx]]
-----------------------------------------------------------------------------------------------------------------------
/**
 *  函數名稱
 *  函數描述(有些會含HTML代碼)
 *
 * @access   變數可存取的權限 (Example: Public or Private)
 * @api    ?第三方來源的變數
 * @author   函數建立者名稱 (Example: @author Barry <riceooks[at]gmail.com>)
 * @category  函數的分類別名，可能某些工具會利用這個來分類你的方法，使好幾個方法歸為某一類，方便做辨識使用
 * @copyright  函數的版權宣告 (Example: @copyright 隨手寫有限公司 www.barryblogs.com)
 * @deprecated  代表不建議使用的函數，未來可能會移除這個方法使用到的某個變數，或整個方法都被刪除
 * @example   代表這個函數使用方式可以參考某個資料，可以使用檔案位置或網址
    (Example: @example http://www.barryblogs.com/)
 * @filesource  這個函數所需的來源
 * @global   函數內有使用的全域變數註解 (Example: @global Number $user_id)
 * @ignore   代表這個函數或區域可以被忽略，通常會加上說明
 * @internal   代表這個函數或區域可能只給予內部使用
 * @license   此函數可能是含有某個版權或許可
    (Example: @license http://opensource.org/licenses/gpl-license.php GNU Public License)
 * @link    可能與某個網站有關係 (Example: @link http://www.barryblogs.com/)
 * @method   函數有使用的方法 (Example: @method Array @this->getCategories() or @method String getUserName())
 * @package   利用這個註解來達到細部分層結構 (Example: @package PSR\Documentation\API or @package PSR\Documentation\Doc)
 * @param    函數要帶入的參數 (Example: @param String|Number $username)
 * @property   如果這是一個類別的函數，在類別建構時通常會指定初始化參數，
    而這個函數可能會使用到某些初始化後的參數，稱之為屬性 (Example: @property Resource|Boolean $mysql_connect)
 * @return   函數最後的回傳值或形態 (Example: @return Array|Object|Boolean)
 * @see    函數參照或關聯的方法 (Example: @see Class User or @see <a href="http://www.barryblogs.com/">BarryBlogs</a>)
 * @since    函數內某個使用的變數由哪個版本變動 (Example: @since v1.3376a $user_nickname )
 * @source   這個比較特別，在函數中可以標示從 m 至 n 行 是做什麼事情 (Example: @source 14 21 Get user data)
 * @static   靜態變數的註解 (Example: @static String $lang = 'zh_TW')
 * @subpackage  利用這個註解來達到細部分層子結構，通常會同時使用 @package，可以參考上面的@package
    Example: @package PSR
             @subpackage Documentation\API
 * @throws   例外處理的註解，有多種例外處理的方式，每種方式都不同
    Example: @throws InvalidArgumentException if the provided argument is not of type 'array'
             @throws Exception other...
 * @todo    計劃要進行的項目描述，一般應該會使用文字描述
 * @uses    代表某個元素可能與其它結構有利用關係 (Example: @uses MyClass::$items to retrieve the count from)
 * @var    變數(物件成員變數)的形態或描述 (Example: @var Boolean)
 * @version   函數的版本 (Example: v1.3258c)
 */
 -----------------------------------------------------------------------------------------------------------------------
 Magento
    1. magento_1_9 key : 876285260d84918adaa5723f38cb3fe5
    2. Disable the URL validate in installing
        Quick solution:
            Inspect "Base URL" input in firebug
            Remove "validate-url" from the list of classes
            Click "continue"
    3. Install step
        Install core
        Login https://www.magentocommerce.com/magento-connect/ and search Traditional Chinese
        Get the extention key
        Login Magento backend > system > Magento Connect > Magento Connect Manager > Input the key to install
 -----------------------------------------------------------------------------------------------------------------------
 reload php.ini on homestead in vagrant
    1. Navigate to folder containing php.ini: $ cd /etc/php5/fpm

    2. Grant read/write access: $ sudo chmod -R ugo+rw php.ini

    3. Open php.ini: $ vim php.ini

    4. Enter edit mode: $ i

    5. Edit stuff

    6. Exit edit mode: Press ESC

    7. Save & close php.ini: $ :x!

    7.1 OPTIONAL: Exit without saving: $ :q

    8. Navigate to home (not sure if this is actually necessary): $ cd ~

    9. Reload/Restart nginx: $ sudo nginx -s reload

    10.1 Reload/Restart php: $ sudo service php5-fpm restart

    10.2 If using PHP 7 then use $ sudo service php7.0-fpm restart (Thanks & Credit to Richard in comments).
 -----------------------------------------------------------------------------------------------------------------------
 install php 5.6 vagrant homestead
    1. Command in git bash: vagrant box add laravel/homestead --box-version 0.3.3
 -----------------------------------------------------------------------------------------------------------------------
 Laravel:
    Routes:
        1.file path: \app\Http\routes.php
        2.basic route:
            Route::<get/post/match/any>(<uri>, <callback>);
            
            uri: any string without 「-」
            callback: array(
                'as' => <alias>, // alias(only could use by "route function")
                'uses' => <controller>@<function>, // controller
                function() {<do>} // closure
            )
        3.fake route:
            in route.php:
                Route::<put/patch/delete>(<uri>, <callback>);
                
            in view:
                method_field(<put/patch/delete>);
        4.route group:
            Route::group(
                [
                    'as' => <group_name> // alias
                    'middleware' => <middleware_name> // middleware
                ],
                function(){
                    Route::<get/post/match/any/put/patch/delete>(<uri>, <callback>);
            });

            *** URI in route group "must" use alias ***
        5.generate URI from URI alias: route(<alias>);
        6.redirect to URI alias: redirect()->route(<alias>);
        7.namespace:
            Route::group(['namespace' => <namespace_name>], function(){
                <controller>
            });
        8.sub-domain:
            Route::group(['domain' => '{<key_word>.com.tw}'], function(){
                Route::get(<uri>, function($<key_word>){<do>});
            });
            
            *** key_word name must be the same ***
        9.route prefix:
            Route::group(['prefix' => <prefix_name>], function(){
                Route::get(<uri>, function(){<do>});
            });
            
        10.CSRF protected:
            1.generate form token: crsf_field()
            
        11.URI without CSRF:
            1.set the white list in middleware
            2.set the white list on the attribute $except in middleware VerifyCsrfToken
     
        12.X-CSRF-TOKEN(in meta):
            1.generate meta token(in view): <meta name="csrf-token" content="{{ csrf_token() }}">
            
        13.implicit binding
            1.auto load data from DB by ID:
                Route::<get/post/match/any/put/patch/delete>(<uri>, <callback>);
            
                uri: <uri>/<id_name>(any string without 「-」)
                callback: 
                    function(App\<model_name> $<id_name>){
                        $<id_name>-><attribute>
                    });
    Middleware:
        1.file path: \app\Http\Middleware\*
        2.create a middleware: php artisan make:middleware <middleware_name>
        3.register a middleware: app/Http/Kernel.php > $routeMiddleware
        4.use middleware:
            Route::<get/post/match/any/put/patch/delete>(<uri>, <callback>);
            
            uri: any string without 「-」
            callback: 
                [
                    'middleware' => <register_name>:<parameter_name>, // middleware
                    function(){<do>}
                ]
        5.after request sent to client: add function "terminate($request, $response)" in the middleware
                                        and register to app/Http/Kernel.php > $middleware
                                    
    Controller:
        1.file path: \app\Http\Controllers\*
        2.create a controller: php artisan make:controller <controller_name>
        2.use in routes.php:
            Route::<get/post/match/any/put/patch/delete>(<uri>, <callback>);
            
            uri: any string without 「-」
            callback: 
                [
                    'as' => <alias>, // alias
                    'middleware' => <register_name>, // middleware
                    'uses' => <controller>@<function> // controller
                ]
        3.get controller uri: route(<uri_alias>)
        4.create route cache: php artisan route:cache
            (this command will use route cache to instead app/Http/routes.php)
        5.clear route cache: php artisan route:clear
        
        
    Request:
        1.define in 「Illuminate\Http\Request」
        2.get request URI: $request->path()
        3.get url with query string: $request->fullUrl()
        4.get url without query string: $request->url()
        5.check url: $request->is(<uri>)
            uri: could use 「*」
        6.get request method: $request->method()
        7.check method: $request->isMethod(<method_name>)
            method_name: case insensitive
        8.PSR-7
        9.access request value:
            input: $request->input(<name>, <default>)
                name:
                    if it is a array, access it by following
                        <array_name>.<index_01>.<index_02>
            directly: $request-><name>
        10.check request value: $request->has(<name>), if it is seted and not null, 「has」 will return true
        11.get all request: $request->all()
        12.get particular request: $request->only(<names>)
            name: set the request name to this array
        13.save request to session:
            $request->flash()
            $request->flashOnly(<names>)
            $request->flushExcept(<names>)
        14.send request to redirected page: redirect(<uri>)->withInput(<values>)
        15.get the request from session or withInput function: old(<name>)
        16.get the cookie: $request->cookie(<name>)
        
    Response:
        1.define in 「Illuminate\Http\Response」
        2.use:
            response(<content>, <status>)
            new Response(<content>, <status>)
        3.with cookie: response(<content>, <status>)->withCookie(<name>, <value>, <minutes>);
        4.with header: response(<content>, <status>)->header(<name>, <value>)
        
    Redirect:
        1.it is an instance of Illuminate\Http\RedirectResponse
        2.use: redirect(<uri>)
        3.back to forward page: back()
        4.redirect to named uri alias: redirect()->route(<alias>, <parameters>)
            parameters: [<name> => <value>] or [<model>]
        5.redirect to controller: redirect()->action(<controller>@<function>, <parameters>)
            <controller>@<function>: must be defined in routes.php
        6.redirect with session: redirect()->with(<name>, <value>)
        7.get the redirect session: session(<name>)
        
    Download file:
        1.download file: response()->download(<file_path>, <download_file_name>, <headers>)
        
    Upload file:
        1.get file: $request->file(<name>)
        2.check if file exists: $request->hasFile(<name>)
        3.validate file: $request->file(<name>)->isValid()
        4.move file: $request->file(<name>)->move(<dest_path>, <dest_file_name>)
        
    View:
        1.file path: resources/views/*
        2.use:
            view(<name>, <data>)
                name:
                    use 「.」 to seperate child dir
                    Ex: resources/views/admin/profile.php > view('admin.profile', $data)
            view(<name>)->with(<name>, <value>)
        3.check if view exists: view()->exists(<name>)
        
    Blade:
        1.file path: resources/views/*
        2.extension: <name>.blade.php
        3.extend: @extend(<name>)
            name: without 「.blade.php」and use 「.」 to seperate child dir
        4.use: view(<name>, <data>)
        5.display with htmlentities(): variable: {{ $<name> }}
        6.escape char: @
        7.「{{ isset($name) ? $name : 'Default' }}」 could be instead of 「{{ $name or 'Default' }}」
        8.display without「htmlentities()」: {!! $<name> !!}
        9.use php syntax:
            apply 「htmlentities()」: {{ method() }}
            if: @if, @elseif, @else, @endif
            unless(equal to "if not equal"): @unless, @endunless
            for: @for, @endfor
            foreach: @foreach, @endforeach
            forelse(easy way to check empty value): @forelse, @empty, @endforelse
            while: @while, @endwile
        10.include a child name: @include(<name>, <parameters>)
            name: without 「.blade.php」and use 「.」 to seperate child dir
            
            *** avoid to use 「__DIR__」 and 「__FILE__」
        11.include view by each: @each(<view_name>, $<name>, <name_in_view>, <view_empty>)
            view_empty: use when $<name> is empty
        12.remark: {{--<remark>--}}
        13.inject service
        14.customize blade syntax
        
    Command:
        1.list php artisan make commands: php artisan list make
        
    Provider:
        1.make provider: php artisan make:provider <name>
        
        
    Service Container:
        Bind: register a function for specific class
        Make: call the function by the binding of specific class
        
    Service Provider:
        
        
        
    Login modified files:
    D:\www\railway\app\Http\Controllers\Auth\AuthController.php
    D:\www\railway\config\auth.php
    D:\www\railway\vendor\laravel\framework\src\Illuminate\Foundation\Auth\AuthenticatesUsers.php
-----------------------------------------------------------------------------------------------------------------------
自動打卡(未完成)
1.

<input type="button" value="簽到" onclick="actCheckInOrCheckOut(0);" />
<input type="button" value="簽退" onclick="actCheckInOrCheckOut(1);" />

2.
function actCheckInOrCheckOut(checkInOrCheckOut,isPre) {
        isPre = isPre || "false";
        
        $.ajax({
            type: 'post',
            url: 'EditMonthForCustomerService',
            data:
            {
                checkInOrCheckOut: checkInOrCheckOut,
                isPre: isPre
            },
            success: function (data) {
                if (data != null) {
                    $("#queryResult").show();
                    $("#queryResult").html(data);
                }
            }
        });
    }
